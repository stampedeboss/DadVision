#!/usr/bin/env python
"""
Purpose:
		Configuration and Run-time settings for the XBMC Support Programs

"""

from configobj import ConfigObj
import os
import re
import sys
import time
import logging
from seriesExceptions import ConfigValueError

__author__ = "AJ Reynolds"
__copyright__ = "Copyright 2011, AJ Reynolds"
__credits__ = []
__license__ = "GPL"

__pgmname__ = 'settings'
__version__ = '$Rev$'

__maintainer__ = "AJ Reynolds"
__email__ = "stampedeboss@gmail.com"
__status__ = "Development"

PgmDir      = os.path.dirname(__file__)
HomeDir     = os.path.expanduser('~')
ConfigDirB  = os.path.join(HomeDir, '.config')
ConfigDir   = os.path.join(ConfigDirB, 'xbmcsupt')
RunDir      = sys.path[0]

logger      = logging.getLogger()

class Settings(object):
		"""Returns new Settings object with Library, RunTime, and Subscriber data.

		settings_requested: List of runtime information being requested. Valid options:
				Library: List of Directories of Video/Non-Video Libraries
				Common: Settings common to many routines
				RoutineName: Name of the special settings

		update_existing: Indicator to request updating an existing config.
		"""

		def __init__(self, settings_requested='Library', pgmname='__pgmname__', subscriber=None, update_existing=False ):

				self._config_file = os.path.expanduser(os.path.join(ConfigDir, '%s.cfg' % pgmname))

				if update_existing or not os.path.exists(self._config_file):
						self.BuildConfig(update_existing)

				config = ConfigObj(self.configfile, unrepr=True, interpolation=False)

				if "Library" in settings_requested:
						Library    = config['Library']
						self.SeriesDir = Library['SeriesDir']
						self.MoviesDir = Library['MoviesDir']
						self.NonVideoDir = Library['NonVideoDir']
						self.SubscriptionDir = Library['SubscriptionDir']
						self.NewDir = Library['NewDir']

						if not os.path.exists(self.SeriesDir):
								logger.error("Path Not Found: %s" % self.SeriesDir)
								logger.error("Invalid Config Entries, Ending")
								raise ConfigValueError("Path Not Found: %s" % self.SeriesDir)

						if not os.path.exists(self.MoviesDir):
								logger.error("Path Not Found: %s" % self.MoviesDir)
								logger.error("Invalid Config Entries, Ending")
								raise ConfigValueError("Path Not Found: %s" % self.MoviesDir)

						if not os.path.exists(self.NonVIdeoDir):
								logger.error("Path Not Found: %s" % self.NonVIdeoDir)
								logger.error("Invalid Config Entries, Ending")
								raise ConfigValueError("Path Not Found: %s" % self.NonVideoDir)

				if "Common" in settings_requested:
						RunTime    = config['RunTime-Common']
						self.MediaExt = RunTime['MediaExt']
						self.MovieGlob = RunTime['MovieGlob']
						self.IgnoreGlob = RunTime['IgnoreGlob']

						self.TvdbIdFile = os.path.expanduser(RunTime['TvdbIdFile'])
						self.ShowAliasFile = os.path.expanduser(RunTime['ShowAliasFile'])

						self.SpecialHandlingList = []
						spl_hand_file = os.path.expanduser(RunTime['SplHandFile'])
						if os.path.exists(spl_hand_file):
								with open(spl_hand_file, "r") as splhand_file_obj:
										for show_name in splhand_file_obj.readlines():
												self.SpecialHandlingList.append(show_name.rstrip("\n"))
								logger.debug('Special Handling for: %s' % self.special_handling)

						self.ExcludeList = []
						exclude_file = os.path.expanduser(RunTime['ExcludeFile'])
						if os.path.exists(exclude_file):
								with open(exclude_file, "r") as exclude_file_obj:
										for line in exclude_file_obj.readlines():
												self.ExcludeList.append(line.rstrip("\n"))

						exclude_extras = os.path.expanduser(RunTime['ExcludeExtrasFile'])
						if os.path.exists(exclude_extras):
								with open(exclude_extras, "r") as exclude_file_obj:
										for line in exclude_file_obj.readlines():
												self.ExcludeList.append(line.rstrip("\n"))

						logger.debug('Exclude List: %s' % self.ExcludeList)

						self.FileNamePatterns = config['FileNames']

						RegEx = config['RegEx']
						patterns = RegEx['patterns']

						self.CompiledRegexs = []
						for cpattern in patterns:
								try:
										cregex = re.compile(cpattern, re.X|re.I)
										self.CompiledRegexs.append(cregex)
								except re.error, errormsg:
										logger.warn("WARNING: Invalid RegEx pattern, %s. %s" % (errormsg, cregex.pattern))
										raise ConfigValueError("WARNING: Invalid RegEx pattern, %s. %s" % (errormsg, cregex.pattern))
										continue

				if "DownloadMonitor" in settings_requested:
						RunTime    = config['RunTime-DownloadMonitor']
						self.WatchDir = os.path.expanduser(RunTime['WatchDir'])

				if "UpdateMonitor" in settings_requested:
						RunTime    = config['RunTime-UpdateMonitor']

		def BuildConfig(self):
				if not os.path.exists(ConfigDir):
						try:
								os.makedirs(ConfigDir)
						except:
								logger.error("Cannot Create Config Directory: %s" % ConfigDir)
								raise ConfigValueError("Cannot Create Config Directory: %s" % ConfigDir)

				config = ConfigObj(unrepr = True, interpolation = False)
				config.filename = self._config_file
				config['Library'] = {}

				_base_dir = get_dir('/mnt', "Base Directory for Libraries")

				config['Library']['SeriesDir'] = get_dir(os.path.join(_base_dir, "Series"), "Series")
				config['Library']['MoviesDir'] = get_dir(os.path.join(_base_dir, "Movies"), "Movies")
				config['Library']['NonVideoDir'] = get_dir(os.path.join(_base_dir, "Non Video Files"), "Downloads")
				config['Library']['SubscriptionDir'] = get_dir(os.path.join(_base_dir, "Links"), "Subscription Files")
				config['Library']['NewDir'] = get_dir(os.path.join(_base_dir, "New"), "Subdirectory for New Files")

				config['RunTime-Common']['MediaExt'] = ['avi', 'mkv', 'mp4', 'mpeg']
				config['RunTime-Common']['MovieGlob'] = [ "720", "1080", "bluray", "bdrip", "brrip", "pal",
															"ntsc", "dvd-r", "fulldvd", "multi", "dts",
															"hdtv", "pdtv", "webrip", "dvdrip", "2lions"
														]
				config['RunTime-Common']['IgnoreGlob'] = ["*sample*", "samples", "sample.avi", "sample-*.avi",
															"*.sfv", ".srt", ".*", "*~", "*.swp", "*.tmp", "*.bak",
																													"*.nfo","*.txt", "thumbs.db", "desktop.ini",
																													"ehthumbs_vista.db", "*.url", "*.doc", "*.docx", "*.jpg",
																													"*.srt", "*.png",	"sample*", "*.com", "*.mds"
																													]

								show_file = raw_input("Enter File Name TVDB Show IDs (%s): " % 'series_tvdb_ids').lstrip(os.sep)
								if not show_file:
										show_file = 'series_tvdb_ids'
								config['RunTime-Common']['TvdbIdFile'] = '%s/%s' % (ConfigDir, show_file)
								touch(os.path.join(os.path.expanduser(ConfigDir), show_file))

								alias_file = raw_input("Enter File Name Show Aliases (%s): " % 'series_aliases').lstrip(os.sep)
								if not alias_file:
					alias_file = 'series_aliases'
								config['RunTime-Common']['ShowAliasFile'] = '%s/%s' % (ConfigDir, alias_file)
								touch(os.path.join(os.path.expanduser(ConfigDir), alias_file))

								config['RunTime-Common']['SplHandFile']   = '%s/special_handling' % ConfigDir
								config['RunTime-Common']['ExcludeExtras'] = '%s/exclude_extras' % ConfigDir
								config['RunTime-Common']['ExcludeFile']   = '%s/exclude_rename' % ConfigDir

								config['RunTime-DownloadMonitor']['WatchDir'] = get_dir(os.path.join('/mnt', 'Downloads/Bittorrent'), "DownloadMonitor Watch Folder")

								config['FileNames'] = {}
				# Formats for renaming files
				config['FileNames']['std_fqn']  = '%(base_dir)s/%(seriesname)s/Season %(seasonnumber)s/%(epno)s %(epname)s.%(ext)s'
				config['FileNames']['proper_fqn']  = '%(base_dir)s/%(seriesname)s/Season %(seasonnumber)s/%(epno)s %(epname)s (PROPER).%(ext)s'
				config['FileNames']['fullname'] = '%(seriesname)s/Season %(seasonnumber)/[%(seriesname)s S0%(seasonnumber)%(epno)s] %(episodename)s%(ext)s'
				config['FileNames']['std_show'] = '%(seriesname)s/Season %(seasonnumber)s/%(epno)s %(epname)s.%(ext)s'
				config['FileNames']['hdtv_fqn'] = '%(seriesname)s/Season %(seasonnumber) hdtv/[%(epno)s] %(episodename)s%(ext)s'
				config['FileNames']['std_epname']= '%(epno)s %(epname)s.%(ext)s'

				# Used to join multiple episode names together
				config['FileNames']['multiep_join_name_with'] = ', '

				# Format for numbers (python string format), %02d does 2-digit
				# padding, %d will cause no padding
				config['FileNames']['episode_single'] = 'E%02d'

				# String to join multiple number
				config['FileNames']['episode_separator'] = '-'

				config['FileNames']['rename_message'] = '%-15.15s Season %2.2s NEW NAME: %-40.40s CUR NAME: %s'

				patterns = [
						'''                                     # RegEx 1
						^(/.*/)?                                # Optional Directory
						({.*})                                  # { GROUP NAME }
						[/\._ \-][/\._ \-]?[/\._ \-]?           # Optional Sep 1-3
						(?P<seriesname>.*)                      # Series Name
						[/\._ \-]                               # Sep 1
						[S|s]                                   # s|S
						[/\._ \-]?                              # Optional Sep 1
						(?P<seasonnumber>[0-9]+)                # Season Number (##)
						[/\._ \-]?                              # Optional Sep 1
						[E|e]                                   # Episode Number (##)
						(?P<episodenumber>[0-9][0-9]+)          # e
						[/\._ \-]?                              # Optional Sep 1
						(?P<epname>.+)?                         # Optional Title
						\.(?P<ext>....?)$                       # extension
						''']

				patterns.append(
						'''                                     # RegEx 2
						^(/.*/)?                                # Optional Directory
						(\[.*\])                                # { GROUP NAME }
						[/\._ \-][/\._ \-]?[/\._ \-]?           # Optional Sep 1-3
						(?P<seriesname>.*)                      # Series Name
						[/\._ \-]                               # Sep 1
						[S|s]                                   # s|S
						[/\._ \-]?                              # Optional Sep 1
						(?P<seasonnumber>[0-9]+)                # Season Number (##)
						[/\._ \-]?                              # Optional Sep 1
						[E|e]                                   # e
						(?P<episodenumber>[0-9][0-9]+)          # Episode Number (##)
						[/\._ \-]?                              # Optional Sep 1
						(?P<epname>.+)?                         # Optional Title
						\.(?P<ext>....?)$                       # extension
						''')

				patterns.append(
						'''                                     # RegEx 3
						^(/.*/)?                                # Optional Directory
						(?P<seriesname>.*)                      # Series Name
						[/\._ \-]                               # Sep 1
						[s|season]                              # s|season
						[/\._ \-]?                              # Optional Sep 1
						(?P<seasonnumber>[0-9]+)                # Season Number (##)
						[/\._ \-]?                              # Sep 1
						[E|e]                                   # e
						(?P<episodenumberstart>[0-9][0-9]+)     # Starting Episode Number (##)
						[\.\- ]?                                # Sep 1
						[e]?                                    # Optional e
						(?P<episodenumberend>[0-9][0-9]+)       # Ending Episode Number (##)
						[\.\- ]                                 # Sep 1
						(?P<epname>.*)                          # Optional Title
						\.(?P<ext>....?)$                       # extension
						''')

				patterns.append(
						'''                                     # RegEx 4
						^(/.*/)?                                # Optional Directory
						(?P<seriesname>.*)                      # Series Name
						[/\._ \-]                               # Sep 1
						[s|season]                              # s|season
						[/\._ \-]?                              # Optional Sep 1
						(?P<seasonnumber>[0-9]+)                # Season Number (##)
						[/\._ \-]?                              # Optional Sep 1
						[E|e]                                   # e
						(?P<episodenumber>[0-9][0-9]+)          # Episode Number (##)
						[/\._ \-]?                              # Optional Sep 1
						(?P<epname>.*)                          # Optional Title
						\.(?P<ext>....?)$                       # extension
						''')

				patterns.append(
						'''                                     # RegEx 5
						^(/.*/)?                                # Optional Directory
						(?P<seriesname>.*)                      # Series Name
						[/\._ \-]                               # Sep 1
						[s|season]                              # s|season
						[/\._ \-]?                              # Optional Sep 1
						(?P<seasonnumber>[0-9]+)                # Season Number (##)
						[/\._ \-]?                              # Optional Sep 1
						(hdtv)?                                 # Optional "hdtv"
						[/\._ \-]?                              # Optional Sep 1
						[E|e]                                   # e
						(?P<episodenumber>[0-9][0-9]+)          # Episode Number (##)
						[/\._ \-]?                              # Optional Sep 1
						(?P<epname>.*)                          # Optional Title
						\.(?P<ext>....?)$                       # extension
						''')

				patterns.append(
						'''                                    # RegEx 6
						^(/.*/)?                               # Optional Directory
						(?P<seriesname>.+?)                    # Series name
						[/\._ \-]                              # Sep 1
						(?P<year>\d{4})                        # year (####)
						[ \._\-]                               # Separator .|1
						(?P<month>\d{2})                       # Month (##)
						[ \._\-]                               # separator .|-
						(?P<day>\d{2})                         # Day (##)
						[/\._ \-]?                             # Optional Sep 1
						(?P<epname>.*)                         # Optional Title
						\.(?P<ext>....?)$                      # extension
						''')

				patterns.append(
						'''                                    # RegEx 7
						^(/.*/)?                               # Optional Directory
						(?P<seriesname>.*)                     # Series Name
						[/\._ \-]                              # Sep 1
						(?P<seasonnumber>[0-9])                # Season Number (##)
						[e|x]?                                 # Optional e|x
						(?P<episodenumber>[0-9][0-9]+)         # Episode Number(##)
						[/\._ \-]?                             # Optional Sep 1
						(?P<epname>.+)?                        # Optional Title
						\.(?P<ext>....?)$                      # extension
						''')

				patterns.append(
						'''                                    # RegEx 8
						^(/.*/)?                               # Optional Directory
						(?P<seriesname>.*)                     # Series Name
						[/\._ \-]+                             # Sep 1 or More
						(?P<seasonnumber>[0-9][0-9])           # Season Number (##)
						[e|x]                                  # e|x
						(?P<episodenumber>[0-9][0-9]+)         # Episode Number(##)
						[/\._ \-]*                             # Optional Sep 1 or more
						(?P<epname>.+)?                        # Optional Title
						\.(?P<ext>....?)$                      # extension
						''')

#        patterns.append(
#            '''                                      # foo s01e23 s01e24 s01e25 *
#            ^((?P<seriesname>.+?)[ \._\-])?          # show name
#            [Ss](?P<seasonnumber>[0-9][0-9]+)        # s01
#            [\.\- ]?                                 # separator
#            [Ee](?P<episodenumberstart>[0-9][0-9]+)  # first e23
#            ([\.\- ]+                                # separator
#            [Ss](?P<seasonnumber>[0-9][0-9]+)        # s01
#            [\.\- ]?                                 # separator
#            [Ee][0-9][0-9]+)*                        # e24 etc (middle groups)
#            ([\.\- ]+                                # separator
#            [Ss](?P<seasonnumber>[0-9][0-9]+)        # s01
#            [\.\- ]?                                 # separator
#            [Ee](?P<episodenumberend>[0-9][0-9]+))   # final episode number
#            [^\/]*$
#            ''')

				patterns.append(
						'''                                      # foo.s01e23e24*
						^((?P<seriesname>.+?)[ \._\-])?          # show name
						[Ss](?P<seasonnumber>[0-9][0-9]+)        # s01
						[\.\- ]?                                 # separator
						[Ee](?P<episodenumberstart>[0-9][0-9]+)  # first e23
						([\.\- ]?                                # separator
						[Ee][0-9][0-9]+)*                        # e24e25 etc
						[\.\- ]?[Ee](?P<episodenumberend>[0-9][0-9]+) # final episode num
						[^\/]*$
						''')

				patterns.append(
						'''                                      # foo.1x23 1x24 1x25
						^((?P<seriesname>.+?)[ \._\-])?          # show name
						(?P<seasonnumber>[0-9]+)                 # first season number (1)
						[xX](?P<episodenumberstart>[0-9][0-9]+)  # first episode (x23)
						([ \._\-]+                               # separator
						(?P=seasonnumber)                        # more season numbers (1)
						[xX][0-9][0-9]+)*                        # more episode numbers (x24)
						([ \._\-]+                               # separator
						(?P=seasonnumber)                        # last season number (1)
						[xX](?P<episodenumberend>[0-9][0-9]+))   # last episode number (x25)
						[^\/]*$
						''')

				patterns.append(
						'''                                      # foo.1x23x24*
						^((?P<seriesname>.+?)[ \._\-])?          # show name
						(?P<seasonnumber>[0-9]+)                 # 1
						[xX](?P<episodenumberstart>[0-9][0-9]+)  # first x23
						([xX][0-9][0-9]+)*                       # x24x25 etc
						[xX](?P<episodenumberend>[0-9][0-9]+)    # final episode num
						[^\/]*$
						''')

				patterns.append(
						'''                                      # foo.s01e23-24*
						^((?P<seriesname>.+?)[ \._\-])?          # show name
						[Ss](?P<seasonnumber>[0-9][0-9]+)        # s01
						[\.\- ]?                                 # separator
						[Ee](?P<episodenumberstart>[0-9][0-9]+)  # first e23
						(                                        # -24 etc
								[\-]
								[Ee]?[0-9][0-9]+
						)*
								[\-]                                # separator
								[Ee]?(?P<episodenumberend>[0-9][0-9]+) # final episode num
						[\.\- ]                                  # must have a separator (prevents s01e01-720p from being 720 episodes)
						[^\/]*$
						''')

				patterns.append(
						'''                                      # foo.1x23-24*
						^((?P<seriesname>.+?)[ \._\-])?          # show name
						(?P<seasonnumber>[0-9]+)                 # 1
						[xX](?P<episodenumberstart>[0-9][0-9]+)  # first x23
						(                                        # -24 etc
								[\-][0-9][0-9]+
						)*
								[\-]                                # separator
								(?P<episodenumberend>[0-9][0-9]+)   # final episode num
						([\.\- ].*                               # must have a separator (prevents 1x01-720p from being 720 episodes)
						|
						$)
						''')

				patterns.append(
						'''                                      # foo.[1x09-11]*
						^(?P<seriesname>.+?)[ \._\-]             # show name and padding
						\[                                       # [
								?(?P<seasonnumber>[0-9]+)            # season
						[xX]                                     # x
								(?P<episodenumberstart>[0-9][0-9]+)  # episode
								(- [0-9][0-9]+)*
						-                                        # -
								(?P<episodenumberend>[0-9][0-9]+)    # episode
						\]                                       # \]
						[^\\/]*$
						''')

				patterns.append(
						'''                                      # foo.s0101, foo.0201
						^(?P<seriesname>.+?)[ \._\-]
						[Ss](?P<seasonnumber>[0-9]{2})
						[\.\- ]?
						(?P<episodenumber>[0-9]{2})
						[^0-9]*$
						''')

				patterns.append(
						'''                                      # foo.1x09*
						^((?P<seriesname>.+?)[ \._\-])?          # show name and padding
						\[?                                      # [ optional
						(?P<seasonnumber>[0-9]+)                 # season
						[xX]                                     # x
						(?P<episodenumber>[0-9][0-9]+)           # episode
						\]?                                      # ] optional
						[^\\/]*$
						''')

				patterns.append(
						'''                                      # foo.s01.e01, foo.s01_e01
						^((?P<seriesname>.+?)[ \._\-])?
						\[?
						[Ss](?P<seasonnumber>[0-9][0-9]+)[\.\- ]?
						[Ee]?(?P<episodenumber>[0-9][0-9]+)
						\]?
						[^\\/]*$
						''')

				patterns.append(
						'''                                      # Foo - S2 E 02 - etc
						^(?P<seriesname>.+?)[ ]?[ \._\-][ ]?
						[Ss](?P<seasonnumber>[0-9]+)[\.\- ]?
						[Ee]?[ ]?(?P<episodenumber>[0-9][0-9]+)
						[^\\/]*$
						''')

				patterns.append(
						'''                                      # Show - Episode 9999 [S 12 - Ep 131] - etc
						(?P<seriesname>.+)                       # Showname
						[ ]-[ ]                                  # -
						[Ee]pisode[ ]\d+                         # Episode 1234 (ignored)
						[ ]
						\[                                       # [
						[sS][ ]?(?P<seasonnumber>\d+)            # s 12
						([ ]|[ ]-[ ]|-)                          # space, or -
						([eE]|[eE]p)[ ]?(?P<episodenumber>\d+)   # e or ep 12
						\]                                       # ]
						.*$                                      # rest of file
						''')

				patterns.append(
						'''                                      # show.name.e123.abc
						^(?P<seriesname>.+?)                     # Show name
						[ \._\-]                                 # Padding
						(?P<episodenumber>[0-9]+)                # 2
						of                                       # of
						[ \._\-]?                                # Padding
						\d+                                      # 6
						([\._ -]|$|[^\\/]*$)                     # More padding, then anything
						''')

				patterns.append(
						'''                                      # foo.103*
						^(?P<seriesname>.+)[ \._\-]
						(?P<seasonnumber>[0-9]{1})
						(?P<episodenumber>[0-9]{2})
						[\._ -][^\\/]*$
						''')

				patterns.append(
						'''                                      # foo.0103*
						^(?P<seriesname>.+)[ \._\-]
						(?P<seasonnumber>[0-9]{2})
						(?P<episodenumber>[0-9]{2,3})
						[\._ -][^\\/]*$
						''')

				patterns.append(
						'''                                      # show.name.e123.abc
						^(?P<seriesname>.+?)                     # Show name
						[ \._\-]                                 # Padding
						[Ee](?P<episodenumber>[0-9]+)            # E123
						[\._ -][^\\/]*$                          # More padding, then anything
						''')

				# Patterns to parse input filenames with
				config['RegEx'] = {}
				config['RegEx']['Patterns'] = patterns

				config.write()
				logger.info('New Config File Created: %s' % self._config_file)
				return

def get_dir(self, dir_name_d, message):
	while True:
		logger.debug("ROUTINE: get_dir %s %s" % (message, dir_name_d))
		dir_name = raw_input("Enter %s Directory (%s): " % (message, dir_name_d)).rstrip(os.sep)
		if not dir_name:
			dir_name = dir_name_d
		if os.path.exists(os.path.expanduser(dir_name)):
			return dir_name
		while not os.path.exists(os.path.expanduser(dir_name)):
			action = raw_input("%s Directory: %s - Not Found,  Ignore/Re-Enter/Create/Abort? (I/R/C/A): " % (message, dir_name)).lower()[0]
			logger.debug("ROUTINE: get_dir loop %s %s %s" % (action, message, dir_name_d))
			if len(action) < 1:
				continue
			elif action[0].lower() == 'a':
				raise UserAbort
			elif action[0].lower() == 'i':
				return dir_name
			elif action[0].lower() == 'c':
					try:
						os.makedirs(os.path.expanduser(dir_name))
						return dir_name
					except OSError, exc:
						logger.error("Unable to Create Directory: %s, %s: " % (dir_name, exc))
						continue
			elif action[0] == 'r':
				dir_name = self.get_dir(dir_name_d, message)
				return dir_name

def touch(self, path):
	now = time.time()
	try:
		# assume it's there
		os.utime(path, (now, now))
	except os.error:
		# if it isn't, try creating the directory,
		# a file with that name
		open(path, "w").close()
		os.utime(path, (now, now))

if __name__ == '__main__':

		update_existing = False
		if len(sys.argv) > 0:
				if sys.argv[1] == 'update':
						update_existing = True

		parms = GetConfig(update_existing, 'GetConfig')

		print parms.watch_dir
		print parms.series_dir
		print parms.series_new_dir
		print parms.movies_dir
		print parms.movies_new_dir
		print parms.other_dir
		print parms.media_ext
		print parms.movie_glob
		print parms.ignore_glob
		print parms.special_handling
		print parms.exclude_list
		print parms.show_file
		print parms.alias_file

		print parms.patterns
